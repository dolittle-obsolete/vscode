'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.restore = restore;
exports.build = build;
exports.buildCurrent = buildCurrent;
exports.test = test;
exports.testDebug = testDebug;
exports.rerunTest = rerunTest;

var _globals = require('../../globals');

var _globals2 = _interopRequireDefault(_globals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var vscode = _globals2.default.vscode;

var spawn = require('child_process').spawn;
var executablePath = require.resolve('./Build/dotnet');

/**
 * Add standard listeners to standard output and error
 * @param {import('child_process').ChildProcess} dotnet
 */
function addListenersToChildProcess(dotnet) {

    dotnet.stdout.on('data', function (data) {
        _globals2.default.dolittleProjectOutputChannel.appendLine(data.toString());
    });

    dotnet.stderr.on('data', function (data) {
        _globals2.default.dolittleProjectOutputChannel.appendLine(data.toString());
    });
}
/**
 * Performs a restore task
 * @param {string} root Root of the workspace
 * @param {string} fileDir The directory path of the currently highlighted file
 * @returns {import('child_process').ChildProcess} The spawned dotnet child process
 * @memberof dotnet
 */
function restore(root, fileDir) {
    _globals2.default.dolittleProjectOutputChannel.appendLine('Restoring dotnet project:');
    var dotnet = spawn('node', [executablePath, '/root:' + root, '/type:build', '/arguments:restore'], { cwd: fileDir });
    addListenersToChildProcess(dotnet);
    return dotnet;
};
/**
 * Performs a build task
 * @param {string} root Root of the workspace
 * @param {string} fileDir The directory path of the currently highlighted file
 * @returns {import('child_process').ChildProcess} The spawned dotnet child process
 * @memberof dotnet
 */
function build(root, fileDir) {
    _globals2.default.dolittleProjectOutputChannel.appendLine('Building dotnet project:');
    var dotnet = spawn('node', [executablePath, '/root:' + root, '/type:build', '/arguments:(build --no-restore)'], { cwd: fileDir });
    addListenersToChildProcess(dotnet);
    return dotnet;
};
/**
 * Performs a build current task
 * @param {string} root Root of the workspace
 * @param {string} fileDir The directory path of the currently highlighted file
 * @returns {import('child_process').ChildProcess} The spawned dotnet child process
 * @memberof dotnet
 */
function buildCurrent(root, fileDir) {
    _globals2.default.dolittleProjectOutputChannel.appendLine('Building current dotnet project:');
    var dotnet = spawn('node', [executablePath, '/type:build', '/ignoreRewriteFolder', '/root:' + root, '/arguments:(build --no-dependencies --no-restore)'], { cwd: fileDir });
    addListenersToChildProcess(dotnet);
    return dotnet;
};
/**
 * Performs a test task
 * @param {string} root Root of the workspace
 * @param {string} fileDir The directory path of the currently highlighted file
 * @returns {import('child_process').ChildProcess} The spawned dotnet child process
 * @memberof dotnet
 */
function test(root, fileDir) {
    _globals2.default.dolittleProjectOutputChannel.appendLine('Running tests for dotnet project:');
    var dotnet = spawn('node', [executablePath, '/type:test', '/root:' + root, '/arguments:(test --no-build --no-restore)'], { cwd: fileDir });
    addListenersToChildProcess(dotnet);
    return dotnet;
};
/**
 * Performs a test debug task
 * @param {string} root Root of the workspace
 * @param {string} fileDir The directory path of the currently highlighted file
 * @returns {import('child_process').ChildProcess} The spawned dotnet child process
 * @memberof dotnet
 */
function testDebug(root, fileDir) {
    _globals2.default.dolittleProjectOutputChannel.appendLine('Debugging tests for dotnet project:');
    var dotnet = spawn('node', [executablePath, '/type:test', '/root:' + root, '/forTests', '/arguments:(test --no-build --no-restore)'], { cwd: fileDir, env: { VSTEST_HOST_DEBUG: "1" } });
    addListenersToChildProcess(dotnet);
    return dotnet;
};
/**
 * Performs a test rerun task
 * @param {string} root Root of the workspace
 * @param {string} fileDir The directory path of the currently highlighted file
 * @returns {import('child_process').ChildProcess} The spawned dotnet child process
 * @memberof dotnet
 */
function rerunTest(root, fileDir) {
    _globals2.default.dolittleProjectOutputChannel.appendLine('Reruns tests for dotnet project:');
    var dotnet = spawn('node', [executablePath, '/type:test', '/root:' + root, '/arguments:(test --no-build --no-restore)', '/rerun'], { cwd: fileDir });
    addListenersToChildProcess(dotnet);
    return dotnet;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,