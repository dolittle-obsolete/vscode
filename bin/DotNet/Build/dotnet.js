#!/usr/local/bin/node
'use strict';

var resolveProject = require('./resolveProject');
var spawn = require('child_process').spawn;

// Args:
// /root:RootDir / Place to put output files
// /t:Type of project running (free-text)
// /r - rerun
// /specsFor

var rerun = false;
var type = "default";
var rootDir = "";
var forTests = false;
var ignoreRewriteFolder = false;
var dotnetArguments = [];

process.argv.forEach(function (item, index) {
    if (index == 0) return;

    if (item.indexOf("/root:") == 0) {
        rootDir = item.substr(6);
    }
    if (item.indexOf("/type:") == 0) {
        type = item.substr(6);
    }
    if (item.indexOf("/rerun") == 0) {
        rerun = true;
    }
    if (item.indexOf("/ignoreRewriteFolder") == 0) {
        ignoreRewriteFolder = true;
    }
    if (item.indexOf("/forTests") == 0) {
        forTests = true;
    }
    if (item.indexOf("/arguments:") == 0) {
        var args = item.substr("/arguments:".length);
        if (args.indexOf("(") == 0) args = args.substr(1, args.length - 2);
        dotnetArguments = args.split(" ");
    }
});

if (rootDir.length == 0) {
    console.log("Missing rootDir - use /root:<root dir> - the rootdir is where any output files are stored");
    process.exit(1);
}

var project = resolveProject(rootDir, type, ignoreRewriteFolder, rerun, forTests);
console.log("Project context: " + project);
console.log("Arguments for dotnet : " + dotnetArguments);
dotnetArguments.push(project);

spawn("dotnet", dotnetArguments, { stdio: "inherit", stderr: "inherit" });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL1NvdXJjZS9Eb3ROZXQvQnVpbGQvZG90bmV0LmpzIl0sIm5hbWVzIjpbInJlc29sdmVQcm9qZWN0IiwicmVxdWlyZSIsInNwYXduIiwicmVydW4iLCJ0eXBlIiwicm9vdERpciIsImZvclRlc3RzIiwiaWdub3JlUmV3cml0ZUZvbGRlciIsImRvdG5ldEFyZ3VtZW50cyIsInByb2Nlc3MiLCJhcmd2IiwiZm9yRWFjaCIsIml0ZW0iLCJpbmRleCIsImluZGV4T2YiLCJzdWJzdHIiLCJhcmdzIiwibGVuZ3RoIiwic3BsaXQiLCJjb25zb2xlIiwibG9nIiwiZXhpdCIsInByb2plY3QiLCJwdXNoIiwic3RkaW8iLCJzdGRlcnIiXSwibWFwcGluZ3MiOiI7O0FBRUEsSUFBTUEsaUJBQWlCQyxRQUFRLGtCQUFSLENBQXZCO0FBQ0EsSUFBTUMsUUFBUUQsUUFBUSxlQUFSLEVBQXlCQyxLQUF2Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUlDLFFBQVEsS0FBWjtBQUNBLElBQUlDLE9BQU8sU0FBWDtBQUNBLElBQUlDLFVBQVUsRUFBZDtBQUNBLElBQUlDLFdBQVcsS0FBZjtBQUNBLElBQUlDLHNCQUFzQixLQUExQjtBQUNBLElBQUlDLGtCQUFrQixFQUF0Qjs7QUFFQUMsUUFBUUMsSUFBUixDQUFhQyxPQUFiLENBQXFCLFVBQUNDLElBQUQsRUFBT0MsS0FBUCxFQUFpQjtBQUNsQyxRQUFJQSxTQUFTLENBQWIsRUFBZ0I7O0FBRWhCLFFBQUlELEtBQUtFLE9BQUwsQ0FBYSxRQUFiLEtBQTBCLENBQTlCLEVBQWlDO0FBQzdCVCxrQkFBVU8sS0FBS0csTUFBTCxDQUFZLENBQVosQ0FBVjtBQUNIO0FBQ0QsUUFBSUgsS0FBS0UsT0FBTCxDQUFhLFFBQWIsS0FBMEIsQ0FBOUIsRUFBaUM7QUFDN0JWLGVBQU9RLEtBQUtHLE1BQUwsQ0FBWSxDQUFaLENBQVA7QUFDSDtBQUNELFFBQUlILEtBQUtFLE9BQUwsQ0FBYSxRQUFiLEtBQTBCLENBQTlCLEVBQWlDO0FBQzdCWCxnQkFBUSxJQUFSO0FBQ0g7QUFDRCxRQUFJUyxLQUFLRSxPQUFMLENBQWEsc0JBQWIsS0FBd0MsQ0FBNUMsRUFBK0M7QUFDM0NQLDhCQUFzQixJQUF0QjtBQUNIO0FBQ0QsUUFBSUssS0FBS0UsT0FBTCxDQUFhLFdBQWIsS0FBNkIsQ0FBakMsRUFBb0M7QUFDaENSLG1CQUFXLElBQVg7QUFDSDtBQUNELFFBQUlNLEtBQUtFLE9BQUwsQ0FBYSxhQUFiLEtBQStCLENBQW5DLEVBQXNDO0FBQ2xDLFlBQUlFLE9BQU9KLEtBQUtHLE1BQUwsQ0FBWSxjQUFjRSxNQUExQixDQUFYO0FBQ0EsWUFBSUQsS0FBS0YsT0FBTCxDQUFhLEdBQWIsS0FBcUIsQ0FBekIsRUFBNkJFLE9BQU9BLEtBQUtELE1BQUwsQ0FBWSxDQUFaLEVBQWVDLEtBQUtDLE1BQUwsR0FBYyxDQUE3QixDQUFQO0FBQzdCVCwwQkFBa0JRLEtBQUtFLEtBQUwsQ0FBVyxHQUFYLENBQWxCO0FBQ0g7QUFDSixDQXZCRDs7QUF5QkEsSUFBSWIsUUFBUVksTUFBUixJQUFrQixDQUF0QixFQUF5QjtBQUNyQkUsWUFBUUMsR0FBUixDQUFZLDJGQUFaO0FBQ0FYLFlBQVFZLElBQVIsQ0FBYSxDQUFiO0FBQ0g7O0FBRUQsSUFBSUMsVUFBVXRCLGVBQWVLLE9BQWYsRUFBd0JELElBQXhCLEVBQThCRyxtQkFBOUIsRUFBbURKLEtBQW5ELEVBQTBERyxRQUExRCxDQUFkO0FBQ0FhLFFBQVFDLEdBQVIsQ0FBWSxzQkFBc0JFLE9BQWxDO0FBQ0FILFFBQVFDLEdBQVIsQ0FBWSw0QkFBMEJaLGVBQXRDO0FBQ0FBLGdCQUFnQmUsSUFBaEIsQ0FBcUJELE9BQXJCOztBQUVBcEIsTUFBTSxRQUFOLEVBQWdCTSxlQUFoQixFQUFpQyxFQUFFZ0IsT0FBTyxTQUFULEVBQW9CQyxRQUFRLFNBQTVCLEVBQWpDIiwiZmlsZSI6ImRvdG5ldC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5jb25zdCByZXNvbHZlUHJvamVjdCA9IHJlcXVpcmUoJy4vcmVzb2x2ZVByb2plY3QnKTtcbmNvbnN0IHNwYXduID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLnNwYXduXG5cbi8vIEFyZ3M6XG4vLyAvcm9vdDpSb290RGlyIC8gUGxhY2UgdG8gcHV0IG91dHB1dCBmaWxlc1xuLy8gL3Q6VHlwZSBvZiBwcm9qZWN0IHJ1bm5pbmcgKGZyZWUtdGV4dClcbi8vIC9yIC0gcmVydW5cbi8vIC9zcGVjc0ZvclxuXG5sZXQgcmVydW4gPSBmYWxzZTtcbmxldCB0eXBlID0gXCJkZWZhdWx0XCI7XG5sZXQgcm9vdERpciA9IFwiXCI7XG5sZXQgZm9yVGVzdHMgPSBmYWxzZTtcbmxldCBpZ25vcmVSZXdyaXRlRm9sZGVyID0gZmFsc2U7XG5sZXQgZG90bmV0QXJndW1lbnRzID0gW107XG5cbnByb2Nlc3MuYXJndi5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgIGlmIChpbmRleCA9PSAwKSByZXR1cm47XG5cbiAgICBpZiAoaXRlbS5pbmRleE9mKFwiL3Jvb3Q6XCIpID09IDApIHtcbiAgICAgICAgcm9vdERpciA9IGl0ZW0uc3Vic3RyKDYpO1xuICAgIH1cbiAgICBpZiAoaXRlbS5pbmRleE9mKFwiL3R5cGU6XCIpID09IDApIHtcbiAgICAgICAgdHlwZSA9IGl0ZW0uc3Vic3RyKDYpO1xuICAgIH1cbiAgICBpZiAoaXRlbS5pbmRleE9mKFwiL3JlcnVuXCIpID09IDApIHtcbiAgICAgICAgcmVydW4gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaXRlbS5pbmRleE9mKFwiL2lnbm9yZVJld3JpdGVGb2xkZXJcIikgPT0gMCkge1xuICAgICAgICBpZ25vcmVSZXdyaXRlRm9sZGVyID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGl0ZW0uaW5kZXhPZihcIi9mb3JUZXN0c1wiKSA9PSAwKSB7XG4gICAgICAgIGZvclRlc3RzID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGl0ZW0uaW5kZXhPZihcIi9hcmd1bWVudHM6XCIpID09IDApIHtcbiAgICAgICAgbGV0IGFyZ3MgPSBpdGVtLnN1YnN0cihcIi9hcmd1bWVudHM6XCIubGVuZ3RoKTtcbiAgICAgICAgaWYoIGFyZ3MuaW5kZXhPZihcIihcIikgPT0gMCApIGFyZ3MgPSBhcmdzLnN1YnN0cigxLCBhcmdzLmxlbmd0aCAtIDIpO1xuICAgICAgICBkb3RuZXRBcmd1bWVudHMgPSBhcmdzLnNwbGl0KFwiIFwiKTtcbiAgICB9XG59KTtcblxuaWYgKHJvb3REaXIubGVuZ3RoID09IDApIHtcbiAgICBjb25zb2xlLmxvZyhcIk1pc3Npbmcgcm9vdERpciAtIHVzZSAvcm9vdDo8cm9vdCBkaXI+IC0gdGhlIHJvb3RkaXIgaXMgd2hlcmUgYW55IG91dHB1dCBmaWxlcyBhcmUgc3RvcmVkXCIpO1xuICAgIHByb2Nlc3MuZXhpdCgxKTtcbn1cblxubGV0IHByb2plY3QgPSByZXNvbHZlUHJvamVjdChyb290RGlyLCB0eXBlLCBpZ25vcmVSZXdyaXRlRm9sZGVyLCByZXJ1biwgZm9yVGVzdHMpO1xuY29uc29sZS5sb2coXCJQcm9qZWN0IGNvbnRleHQ6IFwiICsgcHJvamVjdCk7XG5jb25zb2xlLmxvZyhcIkFyZ3VtZW50cyBmb3IgZG90bmV0IDogXCIrZG90bmV0QXJndW1lbnRzKTtcbmRvdG5ldEFyZ3VtZW50cy5wdXNoKHByb2plY3QpO1xuXG5zcGF3bihcImRvdG5ldFwiLCBkb3RuZXRBcmd1bWVudHMsIHsgc3RkaW86IFwiaW5oZXJpdFwiLCBzdGRlcnI6IFwiaW5oZXJpdFwiIH0pO1xuIl19