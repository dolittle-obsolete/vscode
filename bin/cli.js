'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.spawnDolittleCliCommand = spawnDolittleCliCommand;

var _globals = require('./globals');

var _globals2 = _interopRequireDefault(_globals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var spawn = require('child_process').spawn;
var dolittleExePath = require.resolve('@dolittle/cli');
/**
 *
 *
 * @export
 * @param {string[]} command 
 * @param {string[]} commandArgs
 * @param {import('child_process').SpawnOptions} options
 * @returns {import('child_process').ChildProcess}
 */
function spawnDolittleCliCommand(command, commandArgs, options) {
    var extNameLen = require('path').extname(dolittleExePath).length;
    var execPath = dolittleExePath.slice(0, -extNameLen) + '-' + command.join('-') + '.js';
    var dolittle = spawn('node', [execPath].concat((0, _toConsumableArray3.default)(commandArgs)), options);

    _globals2.default.dolittleCliOutputChannel.appendLine(['$ dolittle'].concat((0, _toConsumableArray3.default)(command), (0, _toConsumableArray3.default)(commandArgs)).join(' '));
    dolittle.stdout.on('data', function (data) {
        _globals2.default.dolittleCliOutputChannel.appendLine(data.toString());
    });

    dolittle.stderr.on('data', function (data) {
        _globals2.default.dolittleCliOutputChannel.appendLine('Error: ' + data.toString());
    });

    return dolittle;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL1NvdXJjZS9jbGkuanMiXSwibmFtZXMiOlsic3Bhd25Eb2xpdHRsZUNsaUNvbW1hbmQiLCJzcGF3biIsInJlcXVpcmUiLCJkb2xpdHRsZUV4ZVBhdGgiLCJyZXNvbHZlIiwiY29tbWFuZCIsImNvbW1hbmRBcmdzIiwib3B0aW9ucyIsImV4dE5hbWVMZW4iLCJleHRuYW1lIiwibGVuZ3RoIiwiZXhlY1BhdGgiLCJzbGljZSIsImpvaW4iLCJkb2xpdHRsZSIsImdsb2JhbHMiLCJkb2xpdHRsZUNsaU91dHB1dENoYW5uZWwiLCJhcHBlbmRMaW5lIiwic3Rkb3V0Iiwib24iLCJkYXRhIiwidG9TdHJpbmciLCJzdGRlcnIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7UUFhZ0JBLHVCLEdBQUFBLHVCOztBQWJoQjs7Ozs7O0FBRUEsSUFBTUMsUUFBUUMsUUFBUSxlQUFSLEVBQXlCRCxLQUF2QztBQUNBLElBQU1FLGtCQUFrQkQsUUFBUUUsT0FBUixDQUFnQixlQUFoQixDQUF4QjtBQUNBOzs7Ozs7Ozs7QUFTTyxTQUFTSix1QkFBVCxDQUFpQ0ssT0FBakMsRUFBMENDLFdBQTFDLEVBQXVEQyxPQUF2RCxFQUFnRTtBQUNuRSxRQUFNQyxhQUFhTixRQUFRLE1BQVIsRUFBZ0JPLE9BQWhCLENBQXdCTixlQUF4QixFQUF5Q08sTUFBNUQ7QUFDQSxRQUFJQyxXQUFXUixnQkFBZ0JTLEtBQWhCLENBQXNCLENBQXRCLEVBQXlCLENBQUNKLFVBQTFCLElBQXdDLEdBQXhDLEdBQTZDSCxRQUFRUSxJQUFSLENBQWEsR0FBYixDQUE3QyxHQUFpRSxLQUFoRjtBQUNBLFFBQUlDLFdBQVdiLE1BQU0sTUFBTixHQUFlVSxRQUFmLDBDQUE0QkwsV0FBNUIsSUFBMENDLE9BQTFDLENBQWY7O0FBRUFRLHNCQUFRQyx3QkFBUixDQUFpQ0MsVUFBakMsQ0FBNEMsQ0FBQyxZQUFELDBDQUFrQlosT0FBbEIsb0NBQThCQyxXQUE5QixHQUEyQ08sSUFBM0MsQ0FBZ0QsR0FBaEQsQ0FBNUM7QUFDQUMsYUFBU0ksTUFBVCxDQUFnQkMsRUFBaEIsQ0FBbUIsTUFBbkIsRUFBMkIsVUFBQ0MsSUFBRCxFQUFVO0FBQ2pDTCwwQkFBUUMsd0JBQVIsQ0FBaUNDLFVBQWpDLENBQTRDRyxLQUFLQyxRQUFMLEVBQTVDO0FBQ0gsS0FGRDs7QUFJQVAsYUFBU1EsTUFBVCxDQUFnQkgsRUFBaEIsQ0FBbUIsTUFBbkIsRUFBMkIsVUFBQ0MsSUFBRCxFQUFVO0FBQ2pDTCwwQkFBUUMsd0JBQVIsQ0FBaUNDLFVBQWpDLGFBQXNERyxLQUFLQyxRQUFMLEVBQXREO0FBQ0gsS0FGRDs7QUFJQSxXQUFPUCxRQUFQO0FBQ0giLCJmaWxlIjoiY2xpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdsb2JhbHMgZnJvbSAnLi9nbG9iYWxzJztcblxuY29uc3Qgc3Bhd24gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJykuc3Bhd247XG5jb25zdCBkb2xpdHRsZUV4ZVBhdGggPSByZXF1aXJlLnJlc29sdmUoJ0Bkb2xpdHRsZS9jbGknKTtcbi8qKlxuICpcbiAqXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjb21tYW5kIFxuICogQHBhcmFtIHtzdHJpbmdbXX0gY29tbWFuZEFyZ3NcbiAqIEBwYXJhbSB7aW1wb3J0KCdjaGlsZF9wcm9jZXNzJykuU3Bhd25PcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7aW1wb3J0KCdjaGlsZF9wcm9jZXNzJykuQ2hpbGRQcm9jZXNzfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3Bhd25Eb2xpdHRsZUNsaUNvbW1hbmQoY29tbWFuZCwgY29tbWFuZEFyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBleHROYW1lTGVuID0gcmVxdWlyZSgncGF0aCcpLmV4dG5hbWUoZG9saXR0bGVFeGVQYXRoKS5sZW5ndGg7XG4gICAgbGV0IGV4ZWNQYXRoID0gZG9saXR0bGVFeGVQYXRoLnNsaWNlKDAsIC1leHROYW1lTGVuKSArICctJysgY29tbWFuZC5qb2luKCctJykgKyAnLmpzJztcbiAgICBsZXQgZG9saXR0bGUgPSBzcGF3bignbm9kZScsIFtleGVjUGF0aCwgLi4uY29tbWFuZEFyZ3NdLCBvcHRpb25zKTtcbiAgICBcbiAgICBnbG9iYWxzLmRvbGl0dGxlQ2xpT3V0cHV0Q2hhbm5lbC5hcHBlbmRMaW5lKFsnJCBkb2xpdHRsZScsIC4uLmNvbW1hbmQsIC4uLmNvbW1hbmRBcmdzXS5qb2luKCcgJykpO1xuICAgIGRvbGl0dGxlLnN0ZG91dC5vbignZGF0YScsIChkYXRhKSA9PiB7XG4gICAgICAgIGdsb2JhbHMuZG9saXR0bGVDbGlPdXRwdXRDaGFubmVsLmFwcGVuZExpbmUoZGF0YS50b1N0cmluZygpKTtcbiAgICB9KTtcblxuICAgIGRvbGl0dGxlLnN0ZGVyci5vbignZGF0YScsIChkYXRhKSA9PiB7XG4gICAgICAgIGdsb2JhbHMuZG9saXR0bGVDbGlPdXRwdXRDaGFubmVsLmFwcGVuZExpbmUoYEVycm9yOiAke2RhdGEudG9TdHJpbmcoKX1gKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBkb2xpdHRsZTtcbn0iXX0=