'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.spawnDolittleCliCommand = spawnDolittleCliCommand;
exports.runDolittleCliCommandThroughIntegratedTerminal = runDolittleCliCommandThroughIntegratedTerminal;

var _globals = require('./globals');

var _globals2 = _interopRequireDefault(_globals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var spawn = require('child_process').spawn;
var dolittleExePath = require.resolve('@dolittle/cli');

/**
 *
 *
 * @param {string[]} command
 */
function getExecutablePath(command) {
    var extNameLen = require('path').extname(dolittleExePath).length;
    return dolittleExePath.slice(0, -extNameLen) + '-' + command.join('-') + '.js';
}
/**
 *
 *
 * @export
 * @param {string[]} command 
 * @param {string[]} commandArgs
 * @param {import('child_process').SpawnOptions} options
 * @returns {import('child_process').ChildProcess}
 */
function spawnDolittleCliCommand(command, commandArgs, options) {
    var execPath = getExecutablePath(command);
    var dolittle = spawn('node', [execPath].concat((0, _toConsumableArray3.default)(commandArgs)), options);

    _globals2.default.dolittleCliOutputChannel.appendLine(['$ dolittle'].concat((0, _toConsumableArray3.default)(command), (0, _toConsumableArray3.default)(commandArgs)).join(' '));
    dolittle.stdout.on('data', function (data) {
        _globals2.default.dolittleCliOutputChannel.append(data.toString());
    });

    dolittle.stderr.on('data', function (data) {
        _globals2.default.dolittleCliOutputChannel.append('Error: ' + data.toString());
    });

    return dolittle;
}
/**
 *
 *
 * @export
 * @param {string[]} command 
 * @param {string[]} commandArgs
 * @param {import('child_process').SpawnOptions} options
 */
function runDolittleCliCommandThroughIntegratedTerminal(command, commandArgs, options) {
    var vscode = _globals2.default.vscode;
    var terminalName = 'Dolittle CLI';
    var execPath = getExecutablePath(command);
    var terminal = vscode.window.terminals.filter(function (term) {
        return term.name === terminalName;
    }).length > 0 ? vscode.window.terminals[0] : vscode.window.createTerminal({ name: terminalName, cwd: options.cwd });
    terminal.show(false);
    terminal.sendText('cd ' + options.cwd + ' && node ' + execPath + ' ' + commandArgs.join(' '));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL1NvdXJjZS9jbGkuanMiXSwibmFtZXMiOlsic3Bhd25Eb2xpdHRsZUNsaUNvbW1hbmQiLCJydW5Eb2xpdHRsZUNsaUNvbW1hbmRUaHJvdWdoSW50ZWdyYXRlZFRlcm1pbmFsIiwic3Bhd24iLCJyZXF1aXJlIiwiZG9saXR0bGVFeGVQYXRoIiwicmVzb2x2ZSIsImdldEV4ZWN1dGFibGVQYXRoIiwiY29tbWFuZCIsImV4dE5hbWVMZW4iLCJleHRuYW1lIiwibGVuZ3RoIiwic2xpY2UiLCJqb2luIiwiY29tbWFuZEFyZ3MiLCJvcHRpb25zIiwiZXhlY1BhdGgiLCJkb2xpdHRsZSIsImdsb2JhbHMiLCJkb2xpdHRsZUNsaU91dHB1dENoYW5uZWwiLCJhcHBlbmRMaW5lIiwic3Rkb3V0Iiwib24iLCJkYXRhIiwiYXBwZW5kIiwidG9TdHJpbmciLCJzdGRlcnIiLCJ2c2NvZGUiLCJ0ZXJtaW5hbE5hbWUiLCJ0ZXJtaW5hbCIsIndpbmRvdyIsInRlcm1pbmFscyIsImZpbHRlciIsInRlcm0iLCJuYW1lIiwiY3JlYXRlVGVybWluYWwiLCJjd2QiLCJzaG93Iiwic2VuZFRleHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7UUF3QmdCQSx1QixHQUFBQSx1QjtRQXVCQUMsOEMsR0FBQUEsOEM7O0FBL0NoQjs7Ozs7O0FBRUEsSUFBTUMsUUFBUUMsUUFBUSxlQUFSLEVBQXlCRCxLQUF2QztBQUNBLElBQU1FLGtCQUFrQkQsUUFBUUUsT0FBUixDQUFnQixlQUFoQixDQUF4Qjs7QUFHQTs7Ozs7QUFLQSxTQUFTQyxpQkFBVCxDQUEyQkMsT0FBM0IsRUFBb0M7QUFDaEMsUUFBTUMsYUFBYUwsUUFBUSxNQUFSLEVBQWdCTSxPQUFoQixDQUF3QkwsZUFBeEIsRUFBeUNNLE1BQTVEO0FBQ0EsV0FBT04sZ0JBQWdCTyxLQUFoQixDQUFzQixDQUF0QixFQUF5QixDQUFDSCxVQUExQixJQUF3QyxHQUF4QyxHQUE2Q0QsUUFBUUssSUFBUixDQUFhLEdBQWIsQ0FBN0MsR0FBaUUsS0FBeEU7QUFDSDtBQUNEOzs7Ozs7Ozs7QUFTTyxTQUFTWix1QkFBVCxDQUFpQ08sT0FBakMsRUFBMENNLFdBQTFDLEVBQXVEQyxPQUF2RCxFQUFnRTtBQUNuRSxRQUFNQyxXQUFXVCxrQkFBa0JDLE9BQWxCLENBQWpCO0FBQ0EsUUFBSVMsV0FBV2QsTUFBTSxNQUFOLEdBQWVhLFFBQWYsMENBQTRCRixXQUE1QixJQUEwQ0MsT0FBMUMsQ0FBZjs7QUFFQUcsc0JBQVFDLHdCQUFSLENBQWlDQyxVQUFqQyxDQUE0QyxDQUFDLFlBQUQsMENBQWtCWixPQUFsQixvQ0FBOEJNLFdBQTlCLEdBQTJDRCxJQUEzQyxDQUFnRCxHQUFoRCxDQUE1QztBQUNBSSxhQUFTSSxNQUFULENBQWdCQyxFQUFoQixDQUFtQixNQUFuQixFQUEyQixVQUFDQyxJQUFELEVBQVU7QUFDakNMLDBCQUFRQyx3QkFBUixDQUFpQ0ssTUFBakMsQ0FBd0NELEtBQUtFLFFBQUwsRUFBeEM7QUFDSCxLQUZEOztBQUlBUixhQUFTUyxNQUFULENBQWdCSixFQUFoQixDQUFtQixNQUFuQixFQUEyQixVQUFDQyxJQUFELEVBQVU7QUFDakNMLDBCQUFRQyx3QkFBUixDQUFpQ0ssTUFBakMsYUFBa0RELEtBQUtFLFFBQUwsRUFBbEQ7QUFDSCxLQUZEOztBQUlBLFdBQU9SLFFBQVA7QUFDSDtBQUNEOzs7Ozs7OztBQVFPLFNBQVNmLDhDQUFULENBQXdETSxPQUF4RCxFQUFpRU0sV0FBakUsRUFBOEVDLE9BQTlFLEVBQXVGO0FBQzFGLFFBQU1ZLFNBQVNULGtCQUFRUyxNQUF2QjtBQUNBLFFBQU1DLGVBQWUsY0FBckI7QUFDQSxRQUFNWixXQUFXVCxrQkFBa0JDLE9BQWxCLENBQWpCO0FBQ0EsUUFBSXFCLFdBQVdGLE9BQU9HLE1BQVAsQ0FBY0MsU0FBZCxDQUF3QkMsTUFBeEIsQ0FBK0I7QUFBQSxlQUFRQyxLQUFLQyxJQUFMLEtBQWNOLFlBQXRCO0FBQUEsS0FBL0IsRUFBbUVqQixNQUFuRSxHQUE0RSxDQUE1RSxHQUNLZ0IsT0FBT0csTUFBUCxDQUFjQyxTQUFkLENBQXdCLENBQXhCLENBREwsR0FFT0osT0FBT0csTUFBUCxDQUFjSyxjQUFkLENBQTZCLEVBQUNELE1BQU1OLFlBQVAsRUFBcUJRLEtBQUtyQixRQUFRcUIsR0FBbEMsRUFBN0IsQ0FGdEI7QUFHQVAsYUFBU1EsSUFBVCxDQUFjLEtBQWQ7QUFDQVIsYUFBU1MsUUFBVCxTQUF3QnZCLFFBQVFxQixHQUFoQyxpQkFBK0NwQixRQUEvQyxTQUEyREYsWUFBWUQsSUFBWixDQUFpQixHQUFqQixDQUEzRDtBQUVIIiwiZmlsZSI6ImNsaS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnbG9iYWxzIGZyb20gJy4vZ2xvYmFscyc7XG5cbmNvbnN0IHNwYXduID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLnNwYXduO1xuY29uc3QgZG9saXR0bGVFeGVQYXRoID0gcmVxdWlyZS5yZXNvbHZlKCdAZG9saXR0bGUvY2xpJyk7XG5cblxuLyoqXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNvbW1hbmRcbiAqL1xuZnVuY3Rpb24gZ2V0RXhlY3V0YWJsZVBhdGgoY29tbWFuZCkge1xuICAgIGNvbnN0IGV4dE5hbWVMZW4gPSByZXF1aXJlKCdwYXRoJykuZXh0bmFtZShkb2xpdHRsZUV4ZVBhdGgpLmxlbmd0aDtcbiAgICByZXR1cm4gZG9saXR0bGVFeGVQYXRoLnNsaWNlKDAsIC1leHROYW1lTGVuKSArICctJysgY29tbWFuZC5qb2luKCctJykgKyAnLmpzJztcbn1cbi8qKlxuICpcbiAqXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjb21tYW5kIFxuICogQHBhcmFtIHtzdHJpbmdbXX0gY29tbWFuZEFyZ3NcbiAqIEBwYXJhbSB7aW1wb3J0KCdjaGlsZF9wcm9jZXNzJykuU3Bhd25PcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7aW1wb3J0KCdjaGlsZF9wcm9jZXNzJykuQ2hpbGRQcm9jZXNzfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3Bhd25Eb2xpdHRsZUNsaUNvbW1hbmQoY29tbWFuZCwgY29tbWFuZEFyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBleGVjUGF0aCA9IGdldEV4ZWN1dGFibGVQYXRoKGNvbW1hbmQpO1xuICAgIGxldCBkb2xpdHRsZSA9IHNwYXduKCdub2RlJywgW2V4ZWNQYXRoLCAuLi5jb21tYW5kQXJnc10sIG9wdGlvbnMpO1xuICAgIFxuICAgIGdsb2JhbHMuZG9saXR0bGVDbGlPdXRwdXRDaGFubmVsLmFwcGVuZExpbmUoWyckIGRvbGl0dGxlJywgLi4uY29tbWFuZCwgLi4uY29tbWFuZEFyZ3NdLmpvaW4oJyAnKSk7XG4gICAgZG9saXR0bGUuc3Rkb3V0Lm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgICAgZ2xvYmFscy5kb2xpdHRsZUNsaU91dHB1dENoYW5uZWwuYXBwZW5kKGRhdGEudG9TdHJpbmcoKSk7XG4gICAgfSk7XG5cbiAgICBkb2xpdHRsZS5zdGRlcnIub24oJ2RhdGEnLCAoZGF0YSkgPT4ge1xuICAgICAgICBnbG9iYWxzLmRvbGl0dGxlQ2xpT3V0cHV0Q2hhbm5lbC5hcHBlbmQoYEVycm9yOiAke2RhdGEudG9TdHJpbmcoKX1gKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBkb2xpdHRsZTtcbn1cbi8qKlxuICpcbiAqXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjb21tYW5kIFxuICogQHBhcmFtIHtzdHJpbmdbXX0gY29tbWFuZEFyZ3NcbiAqIEBwYXJhbSB7aW1wb3J0KCdjaGlsZF9wcm9jZXNzJykuU3Bhd25PcHRpb25zfSBvcHRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydW5Eb2xpdHRsZUNsaUNvbW1hbmRUaHJvdWdoSW50ZWdyYXRlZFRlcm1pbmFsKGNvbW1hbmQsIGNvbW1hbmRBcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgdnNjb2RlID0gZ2xvYmFscy52c2NvZGU7XG4gICAgY29uc3QgdGVybWluYWxOYW1lID0gJ0RvbGl0dGxlIENMSSc7XG4gICAgY29uc3QgZXhlY1BhdGggPSBnZXRFeGVjdXRhYmxlUGF0aChjb21tYW5kKTtcbiAgICBsZXQgdGVybWluYWwgPSB2c2NvZGUud2luZG93LnRlcm1pbmFscy5maWx0ZXIodGVybSA9PiB0ZXJtLm5hbWUgPT09IHRlcm1pbmFsTmFtZSkubGVuZ3RoID4gMD8gXG4gICAgICAgICAgICAgICAgICAgICAgICB2c2NvZGUud2luZG93LnRlcm1pbmFsc1swXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB2c2NvZGUud2luZG93LmNyZWF0ZVRlcm1pbmFsKHtuYW1lOiB0ZXJtaW5hbE5hbWUsIGN3ZDogb3B0aW9ucy5jd2R9KTtcbiAgICB0ZXJtaW5hbC5zaG93KGZhbHNlKTtcbiAgICB0ZXJtaW5hbC5zZW5kVGV4dChgY2QgJHtvcHRpb25zLmN3ZH0gJiYgbm9kZSAke2V4ZWNQYXRofSAke2NvbW1hbmRBcmdzLmpvaW4oJyAnKX1gKTtcbiAgICBcbn0iXX0=