'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.spawnDolittleCliCommand = spawnDolittleCliCommand;
exports.runDolittleCliCommandThroughIntegratedTerminal = runDolittleCliCommandThroughIntegratedTerminal;

var _globals = require('./globals');

var _globals2 = _interopRequireDefault(_globals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var spawn = require('child_process').spawn;
var dolittleExePath = require.resolve('@dolittle/cli');
var nodeExePath = process.execPath;

/**
 *
 *
 * @param {string[]} command
 */
function getExecutablePath(command) {
    var extNameLen = require('path').extname(dolittleExePath).length;
    return dolittleExePath.slice(0, -extNameLen) + '-' + command.join('-') + '.js';
}
/**
 *
 *
 * @export
 * @param {string[]} command 
 * @param {string[]} commandArgs
 * @param {import('child_process').SpawnOptions} options
 * @returns {import('child_process').ChildProcess}
 */
function spawnDolittleCliCommand(command, commandArgs, options) {
    var execPath = getExecutablePath(command);
    var dolittle = spawn(nodeExePath, [execPath].concat((0, _toConsumableArray3.default)(commandArgs)), options);

    _globals2.default.dolittleCliOutputChannel.appendLine(['$ dolittle'].concat((0, _toConsumableArray3.default)(command), (0, _toConsumableArray3.default)(commandArgs)).join(' '));
    dolittle.stdout.on('data', function (data) {
        _globals2.default.dolittleCliOutputChannel.appendLine(data.toString());
    });

    dolittle.stderr.on('data', function (data) {
        _globals2.default.dolittleCliOutputChannel.appendLine('Error: ' + data.toString());
    });

    return dolittle;
}
/**
 *
 *
 * @export
 * @param {string[]} command 
 * @param {string[]} commandArgs
 * @param {import('child_process').SpawnOptions} options
 */
function runDolittleCliCommandThroughIntegratedTerminal(command, commandArgs, options) {
    var vscode = _globals2.default.vscode;
    var terminalName = 'Dolittle CLI';
    var execPath = getExecutablePath(command);
    var terminal = vscode.window.terminals.filter(function (term) {
        return term.name === terminalName;
    }).length > 0 ? vscode.window.terminals[0] : vscode.window.createTerminal({ name: terminalName, cwd: options.cwd });
    terminal.show(false);
    terminal.sendText('cd ' + options.cwd + ' && ' + nodeExePath + ' ' + execPath + ' ' + commandArgs.join(' '));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL1NvdXJjZS9jbGkuanMiXSwibmFtZXMiOlsic3Bhd25Eb2xpdHRsZUNsaUNvbW1hbmQiLCJydW5Eb2xpdHRsZUNsaUNvbW1hbmRUaHJvdWdoSW50ZWdyYXRlZFRlcm1pbmFsIiwic3Bhd24iLCJyZXF1aXJlIiwiZG9saXR0bGVFeGVQYXRoIiwicmVzb2x2ZSIsIm5vZGVFeGVQYXRoIiwicHJvY2VzcyIsImV4ZWNQYXRoIiwiZ2V0RXhlY3V0YWJsZVBhdGgiLCJjb21tYW5kIiwiZXh0TmFtZUxlbiIsImV4dG5hbWUiLCJsZW5ndGgiLCJzbGljZSIsImpvaW4iLCJjb21tYW5kQXJncyIsIm9wdGlvbnMiLCJkb2xpdHRsZSIsImdsb2JhbHMiLCJkb2xpdHRsZUNsaU91dHB1dENoYW5uZWwiLCJhcHBlbmRMaW5lIiwic3Rkb3V0Iiwib24iLCJkYXRhIiwidG9TdHJpbmciLCJzdGRlcnIiLCJ2c2NvZGUiLCJ0ZXJtaW5hbE5hbWUiLCJ0ZXJtaW5hbCIsIndpbmRvdyIsInRlcm1pbmFscyIsImZpbHRlciIsInRlcm0iLCJuYW1lIiwiY3JlYXRlVGVybWluYWwiLCJjd2QiLCJzaG93Iiwic2VuZFRleHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7UUF3QmdCQSx1QixHQUFBQSx1QjtRQXVCQUMsOEMsR0FBQUEsOEM7O0FBL0NoQjs7Ozs7O0FBRUEsSUFBTUMsUUFBUUMsUUFBUSxlQUFSLEVBQXlCRCxLQUF2QztBQUNBLElBQU1FLGtCQUFrQkQsUUFBUUUsT0FBUixDQUFnQixlQUFoQixDQUF4QjtBQUNBLElBQU1DLGNBQWNDLFFBQVFDLFFBQTVCOztBQUVBOzs7OztBQUtBLFNBQVNDLGlCQUFULENBQTJCQyxPQUEzQixFQUFvQztBQUNoQyxRQUFNQyxhQUFhUixRQUFRLE1BQVIsRUFBZ0JTLE9BQWhCLENBQXdCUixlQUF4QixFQUF5Q1MsTUFBNUQ7QUFDQSxXQUFPVCxnQkFBZ0JVLEtBQWhCLENBQXNCLENBQXRCLEVBQXlCLENBQUNILFVBQTFCLElBQXdDLEdBQXhDLEdBQTZDRCxRQUFRSyxJQUFSLENBQWEsR0FBYixDQUE3QyxHQUFpRSxLQUF4RTtBQUNIO0FBQ0Q7Ozs7Ozs7OztBQVNPLFNBQVNmLHVCQUFULENBQWlDVSxPQUFqQyxFQUEwQ00sV0FBMUMsRUFBdURDLE9BQXZELEVBQWdFO0FBQ25FLFFBQU1ULFdBQVdDLGtCQUFrQkMsT0FBbEIsQ0FBakI7QUFDQSxRQUFJUSxXQUFXaEIsTUFBTUksV0FBTixHQUFvQkUsUUFBcEIsMENBQWlDUSxXQUFqQyxJQUErQ0MsT0FBL0MsQ0FBZjs7QUFFQUUsc0JBQVFDLHdCQUFSLENBQWlDQyxVQUFqQyxDQUE0QyxDQUFDLFlBQUQsMENBQWtCWCxPQUFsQixvQ0FBOEJNLFdBQTlCLEdBQTJDRCxJQUEzQyxDQUFnRCxHQUFoRCxDQUE1QztBQUNBRyxhQUFTSSxNQUFULENBQWdCQyxFQUFoQixDQUFtQixNQUFuQixFQUEyQixVQUFDQyxJQUFELEVBQVU7QUFDakNMLDBCQUFRQyx3QkFBUixDQUFpQ0MsVUFBakMsQ0FBNENHLEtBQUtDLFFBQUwsRUFBNUM7QUFDSCxLQUZEOztBQUlBUCxhQUFTUSxNQUFULENBQWdCSCxFQUFoQixDQUFtQixNQUFuQixFQUEyQixVQUFDQyxJQUFELEVBQVU7QUFDakNMLDBCQUFRQyx3QkFBUixDQUFpQ0MsVUFBakMsYUFBc0RHLEtBQUtDLFFBQUwsRUFBdEQ7QUFDSCxLQUZEOztBQUlBLFdBQU9QLFFBQVA7QUFDSDtBQUNEOzs7Ozs7OztBQVFPLFNBQVNqQiw4Q0FBVCxDQUF3RFMsT0FBeEQsRUFBaUVNLFdBQWpFLEVBQThFQyxPQUE5RSxFQUF1RjtBQUMxRixRQUFNVSxTQUFTUixrQkFBUVEsTUFBdkI7QUFDQSxRQUFNQyxlQUFlLGNBQXJCO0FBQ0EsUUFBTXBCLFdBQVdDLGtCQUFrQkMsT0FBbEIsQ0FBakI7QUFDQSxRQUFJbUIsV0FBV0YsT0FBT0csTUFBUCxDQUFjQyxTQUFkLENBQXdCQyxNQUF4QixDQUErQjtBQUFBLGVBQVFDLEtBQUtDLElBQUwsS0FBY04sWUFBdEI7QUFBQSxLQUEvQixFQUFtRWYsTUFBbkUsR0FBNEUsQ0FBNUUsR0FDS2MsT0FBT0csTUFBUCxDQUFjQyxTQUFkLENBQXdCLENBQXhCLENBREwsR0FFT0osT0FBT0csTUFBUCxDQUFjSyxjQUFkLENBQTZCLEVBQUNELE1BQU1OLFlBQVAsRUFBcUJRLEtBQUtuQixRQUFRbUIsR0FBbEMsRUFBN0IsQ0FGdEI7QUFHQVAsYUFBU1EsSUFBVCxDQUFjLEtBQWQ7QUFDQVIsYUFBU1MsUUFBVCxTQUF3QnJCLFFBQVFtQixHQUFoQyxZQUEwQzlCLFdBQTFDLFNBQXlERSxRQUF6RCxTQUFxRVEsWUFBWUQsSUFBWixDQUFpQixHQUFqQixDQUFyRTtBQUVIIiwiZmlsZSI6ImNsaS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnbG9iYWxzIGZyb20gJy4vZ2xvYmFscyc7XG5cbmNvbnN0IHNwYXduID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLnNwYXduO1xuY29uc3QgZG9saXR0bGVFeGVQYXRoID0gcmVxdWlyZS5yZXNvbHZlKCdAZG9saXR0bGUvY2xpJyk7XG5jb25zdCBub2RlRXhlUGF0aCA9IHByb2Nlc3MuZXhlY1BhdGg7XG5cbi8qKlxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjb21tYW5kXG4gKi9cbmZ1bmN0aW9uIGdldEV4ZWN1dGFibGVQYXRoKGNvbW1hbmQpIHtcbiAgICBjb25zdCBleHROYW1lTGVuID0gcmVxdWlyZSgncGF0aCcpLmV4dG5hbWUoZG9saXR0bGVFeGVQYXRoKS5sZW5ndGg7XG4gICAgcmV0dXJuIGRvbGl0dGxlRXhlUGF0aC5zbGljZSgwLCAtZXh0TmFtZUxlbikgKyAnLScrIGNvbW1hbmQuam9pbignLScpICsgJy5qcyc7XG59XG4vKipcbiAqXG4gKlxuICogQGV4cG9ydFxuICogQHBhcmFtIHtzdHJpbmdbXX0gY29tbWFuZCBcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNvbW1hbmRBcmdzXG4gKiBAcGFyYW0ge2ltcG9ydCgnY2hpbGRfcHJvY2VzcycpLlNwYXduT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge2ltcG9ydCgnY2hpbGRfcHJvY2VzcycpLkNoaWxkUHJvY2Vzc31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNwYXduRG9saXR0bGVDbGlDb21tYW5kKGNvbW1hbmQsIGNvbW1hbmRBcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgZXhlY1BhdGggPSBnZXRFeGVjdXRhYmxlUGF0aChjb21tYW5kKTtcbiAgICBsZXQgZG9saXR0bGUgPSBzcGF3bihub2RlRXhlUGF0aCwgW2V4ZWNQYXRoLCAuLi5jb21tYW5kQXJnc10sIG9wdGlvbnMpO1xuICAgIFxuICAgIGdsb2JhbHMuZG9saXR0bGVDbGlPdXRwdXRDaGFubmVsLmFwcGVuZExpbmUoWyckIGRvbGl0dGxlJywgLi4uY29tbWFuZCwgLi4uY29tbWFuZEFyZ3NdLmpvaW4oJyAnKSk7XG4gICAgZG9saXR0bGUuc3Rkb3V0Lm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgICAgZ2xvYmFscy5kb2xpdHRsZUNsaU91dHB1dENoYW5uZWwuYXBwZW5kTGluZShkYXRhLnRvU3RyaW5nKCkpO1xuICAgIH0pO1xuXG4gICAgZG9saXR0bGUuc3RkZXJyLm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgICAgZ2xvYmFscy5kb2xpdHRsZUNsaU91dHB1dENoYW5uZWwuYXBwZW5kTGluZShgRXJyb3I6ICR7ZGF0YS50b1N0cmluZygpfWApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRvbGl0dGxlO1xufVxuLyoqXG4gKlxuICpcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNvbW1hbmQgXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjb21tYW5kQXJnc1xuICogQHBhcmFtIHtpbXBvcnQoJ2NoaWxkX3Byb2Nlc3MnKS5TcGF3bk9wdGlvbnN9IG9wdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bkRvbGl0dGxlQ2xpQ29tbWFuZFRocm91Z2hJbnRlZ3JhdGVkVGVybWluYWwoY29tbWFuZCwgY29tbWFuZEFyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB2c2NvZGUgPSBnbG9iYWxzLnZzY29kZTtcbiAgICBjb25zdCB0ZXJtaW5hbE5hbWUgPSAnRG9saXR0bGUgQ0xJJztcbiAgICBjb25zdCBleGVjUGF0aCA9IGdldEV4ZWN1dGFibGVQYXRoKGNvbW1hbmQpO1xuICAgIGxldCB0ZXJtaW5hbCA9IHZzY29kZS53aW5kb3cudGVybWluYWxzLmZpbHRlcih0ZXJtID0+IHRlcm0ubmFtZSA9PT0gdGVybWluYWxOYW1lKS5sZW5ndGggPiAwPyBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZzY29kZS53aW5kb3cudGVybWluYWxzWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHZzY29kZS53aW5kb3cuY3JlYXRlVGVybWluYWwoe25hbWU6IHRlcm1pbmFsTmFtZSwgY3dkOiBvcHRpb25zLmN3ZH0pO1xuICAgIHRlcm1pbmFsLnNob3coZmFsc2UpO1xuICAgIHRlcm1pbmFsLnNlbmRUZXh0KGBjZCAke29wdGlvbnMuY3dkfSAmJiAke25vZGVFeGVQYXRofSAke2V4ZWNQYXRofSAke2NvbW1hbmRBcmdzLmpvaW4oJyAnKX1gKTtcbiAgICBcbn0iXX0=